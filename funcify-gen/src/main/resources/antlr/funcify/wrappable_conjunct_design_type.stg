import "ensemble_type.stg"

wrappable_conjunct_design_type(class_name,
                               container_type,
                               package=[],
                               witness_type="WT",
                               type_variables=[],
                               next_type_variable="") ::= <<
package <package; separator=".">;

<ensemble_type_import(container_type.type_name, container_type.type_package)>
<null_check_import()>
<java_util_func_import()>
import funcify.function.Fn<length(type_variables)>;

public interface <ensemble_type_declaration(class_name, witness_type, type_variables)> {

<conjunct_wrap_method(container_type, witness_type, type_variables)>

<conjunct_unwrap_method(next_type_variable, container_type, witness_type, type_variables)>

}
>>

conjunct_wrap_method(container_type, current_type_variable, type_variables=[], numeric_suffix="") ::= <<
    \<<type_variables;separator=", ">\> <ensemble_type_declaration(container_type.type_name, witness_type, type_variables)> wrap(<type_variables:{tv | final <tv> input<i>};anchor,separator=",\n">);
>>

conjunct_unwrap_method(next_type_variable, container_type, witness_type="WT", type_variables=[]) ::=  <<
    default \<<next_type_variable>\> <next_type_variable> unwrap(<[conjunct_unwrap_container_parameter(container_type, witness_type, type_variables),conjunct_unwrap_method_parameter(next_type_variable, type_variables)];anchor,separator=",\n">) {
        <null_check("container")>;
        <null_check("unwrapper")>;
        return container.fold(unwrapper);
    }
>>

conjunct_unwrap_container_parameter(container_type, witness_type, type_variables=[]) ::= <<
final <ensemble_type_declaration(container_type.type_name, witness_type, type_variables)> container
>>

conjunct_unwrap_method_parameter(next_type_variable, type_variables=[]) ::= <<
final Fn<length(type_variables)>\<<type_variables:{tv | ? super <tv>};separator=", ">, ? extends <next_type_variable>\> unwrapper
>>