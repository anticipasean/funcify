import "ensemble_type.stg"

errable_function_type(ensemble_type_name,
                      arity="",
                      ensemble_type_package=[],
                      package=[],
                      witness_type="WT",
                      next_type_variable="",
                      type_variables=[]) ::= <<
package <package; separator=".">;

<null_check_import()>
<ensemble_type_import(ensemble_type_name, ensemble_type_package)>
import <package; separator=".">.ErrableFn<arity>.<witness_type>;

<ensemble_type_import("Solo", ensemble_type_package)>

public interface <errable_function_type_declaration(arity, type_variables)> extends <errable_ensemble_type_declaration(ensemble_type_name, witness_type, type_variables)> {

<witness_type_definition(witness_type)>

<narrow_kind_functions(arity, type_variables, witness_type, ensemble_type_name)>

<apply_method(type_variables)>

<map_method(arity, type_variables, next_type_variable)>

<and_then_method(arity, type_variables, next_type_variable)>

<flat_map_method(arity, type_variables, next_type_variable)>

<curry_method(type_variables)>

<uncurry_method(arity,type_variables)>

}
>>

errable_function_type_declaration(arity="0", type_variables=[]) ::= "ErrableFn<arity>\<<type_variables; separator={, }>, THR extends Throwable>"

function_type_declaration(arity="0", type_variables=[]) ::= "ErrableFn<arity>\<<type_variables; separator={, }>, THR>"

function_type_parameter_declaration(type_variables, next_type_variable) ::= "final ErrableFn1\<<type_variables:{tv | ? super <tv>};separator={, }>, ? extends <next_type_variable>, THR> function"

errable_ensemble_type_declaration(ensemble_type_name, witness_type="WT", type_variables=[]) ::= "<ensemble_type_name>\<<witness_type>, <type_variables; separator={, }>, THR>"

witness_type_definition(witness_type) ::= <<

    static enum <witness_type> {

    }
>>

narrow_kind_functions(arity="0", type_variables=[], witness_type="WT", ensemble_type_name="", implements_supplier=false) ::= <<

    static \<<type_variables; separator=", ">, THR extends Throwable> <function_type_declaration(arity, type_variables)> narrowK(final <recursive_solo_type_declaration(witness_type, [type_variables,"THR"])> wideInstance) {
        return (<function_type_declaration(arity, type_variables)>) wideInstance;
    }

<if(!implements_supplier)>
    static \<<type_variables; separator=", ">, THR extends Throwable> <function_type_declaration(arity, type_variables)> narrowK(final <errable_ensemble_type_declaration(ensemble_type_name, witness_type, type_variables)> wideInstance) {
        return (<function_type_declaration(arity, type_variables)>) wideInstance;
    }
<endif>
>>

apply_method(type_variables=[], implements_supplier=false) ::= <<
    <last(type_variables)> apply(<trunc(type_variables):{tv | final <tv> input<i>};anchor,separator=",\n">) throws THR;

<if(implements_supplier)>
    @Override
    default <last(type_variables)> get() {
        return apply();
    }
<endif>
>>

map_method(arity="0", type_variables=[], next_type_variable="") ::= <<
    default \<<next_type_variable>\> <function_type_declaration(arity, [trunc(type_variables), next_type_variable])> map(<function_type_parameter_declaration(last(type_variables), next_type_variable)>) {
        <null_check("function")>;
        return (<trunc(type_variables):{tv | <tv> input<i>};anchor,separator=",\n">) -> {
            return function.apply(this.apply(<trunc(type_variables):{tv | input<i>};anchor,separator=",\n">));
        };
    }
>>

and_then_method(arity="0", type_variables=[], next_type_variable="", implements_function=false) ::= <<
    <if(implements_function)><\\>
    <else><\\>
    default \<<next_type_variable>\> <function_type_declaration(arity, [trunc(type_variables), next_type_variable])> andThen(<function_type_parameter_declaration(last(type_variables), next_type_variable)>) {
        return map(function);
    }
    <endif>
>>

flat_map_method(arity="0", type_variables=[], next_type_variable="") ::= <<
    default \<<next_type_variable>\> <function_type_declaration(arity, [trunc(type_variables), next_type_variable])> flatMap(<flat_map_method_parameter(arity, type_variables, next_type_variable)>) {
        <null_check("function")>;
        return (<trunc(type_variables):{tv | <tv> input<i>};anchor,separator=",\n">) -> {
            return function.apply(this.apply(<trunc(type_variables):{tv | input<i>};anchor,separator=",\n">)).apply(<trunc(type_variables):{tv | input<i>};anchor,separator=",\n">);
        };
    }
>>

flat_map_method_parameter(arity="0", type_variables=[], next_type_variable="") ::= <<
<if(!rest(type_variables))><\\>
final ErrableFn1\<? super <last(type_variables)>, ? extends ErrableFn<arity>\<? extends <next_type_variable>, THR>, THR> function<\\>
<else><\\>
final ErrableFn1\<? super <last(type_variables)>, ? extends ErrableFn<arity>\<<trunc(type_variables):{tv | ? super <tv>};separator=", ">, ? extends <next_type_variable>, THR>, THR> function<\\>
<endif>
>>

curry_method(type_variables=[]) ::= <<
<if(rest(type_variables))>
    default <curry_method_return_type(first(type_variables), rest(type_variables))> curry() {
        return <curry_method_return_function(type_variables,
                                             first(type_variables),
                                             rest(type_variables))>
    }
<endif>
>>

curry_method_return_type(current_type_variable="",
                         remaining_type_variables=[]) ::= <<
ErrableFn1\<<current_type_variable>, <if(rest(remaining_type_variables))><curry_method_return_type(first(remaining_type_variables),
                                                                                                   rest(remaining_type_variables))><\\>
                                     <else><first(remaining_type_variables)><\\>
                                     <endif>, THR>
>>

curry_method_return_function(all_type_variables=[],
                             current_type_variable="",
                             remaining_type_variables=[]) ::= <<
    (<current_type_variable> input<current_type_variable>) -> {
            <if(rest(remaining_type_variables))>return <curry_method_return_function(all_type_variables,
                                                                                     first(remaining_type_variables),
                                                                                     rest(remaining_type_variables))>
            <else>return apply(<trunc(all_type_variables):{tv | input<tv>};anchor,separator=",\n">);
            <endif>
        };
>>

uncurry_method(arity="0",
               type_variables=[]) ::= <<
<if(rest(rest(type_variables)))>
    static \<<type_variables; separator=", ">, THR extends Throwable> <function_type_declaration(arity, type_variables)> uncurry(final <curry_method_return_type(first(type_variables), rest(type_variables))> function) {
        <null_check("function")>;
        return (<trunc(type_variables):{tv|<tv> input<tv>};anchor,separator=",\n">) -> {
                return function<uncurry_method_apply(first(type_variables), rest(type_variables))>;
            };
    }
<endif>
>>

uncurry_method_apply(current_type_variable, remaining_type_variables) ::= <<
<if(rest(remaining_type_variables))>
                .apply(input<current_type_variable>)<uncurry_method_apply(first(remaining_type_variables), rest(remaining_type_variables))><\\>
<else>
                .apply(input<current_type_variable>)<\\>
<endif>
>>