import "antlr/funcify/ensemble/basetype/ensemble_type.stg"

errable_consumer_function_type(ensemble_type_name,
                               arity="",
                               ensemble_type_package=[],
                               package=[],
                               witness_type="WT",
                               next_type_variable="",
                               type_variables=[]) ::= <<
package <package; separator=".">;

<ensemble_type_import(ensemble_type_name, ensemble_type_package)>
import <package; separator=".">.ErrableConsumerFn<arity>.<witness_type>;
<ensemble_type_import("Solo", ensemble_type_package)>


<code_generated_comment()>
public interface <errable_function_type_declaration(arity, type_variables)> extends <errable_ensemble_type_declaration(ensemble_type_name, witness_type, type_variables)> {

<witness_type_definition(witness_type)>

<narrow_kind_functions(arity, type_variables, witness_type, ensemble_type_name)>

<apply_method(type_variables)>

}
>>

errable_function_type_declaration(arity="0", type_variables=[]) ::= "ErrableConsumerFn<arity>\<<type_variables; separator={, }>, THR extends Throwable>"

function_type_declaration(arity="0", type_variables=[]) ::= "ErrableConsumerFn<arity>\<<type_variables; separator={, }>, THR>"

function_type_parameter_declaration(type_variables, next_type_variable) ::= "final ErrableConsumerFn1\<<type_variables:{tv | ? super <tv>};separator={, }>, ? extends <next_type_variable>, THR> function"

errable_ensemble_type_declaration(ensemble_type_name, witness_type="WT", type_variables=[]) ::= "<ensemble_type_name>\<<witness_type>, <type_variables; separator={, }>, THR>"

witness_type_definition(witness_type) ::= <<

    static enum <witness_type> {

    }
>>

narrow_kind_functions(arity="0", type_variables=[], witness_type="WT", ensemble_type_name="") ::= <<

    static \<<type_variables; separator=", ">, THR extends Throwable> <function_type_declaration(arity, type_variables)> narrowK(final <recursive_solo_type_declaration(witness_type, [type_variables,"THR"])> wideInstance) {
        return (<function_type_declaration(arity, type_variables)>) wideInstance;
    }
<if(rest(type_variables))>
    static \<<type_variables; separator=", ">, THR extends Throwable> <function_type_declaration(arity, type_variables)> narrowK(final <errable_ensemble_type_declaration(ensemble_type_name, witness_type, type_variables)> wideInstance) {
        return (<function_type_declaration(arity, type_variables)>) wideInstance;
    }
<endif>
>>

apply_method(type_variables=[]) ::= <<
    void apply(<type_variables:{tv | final <tv> input<i>};anchor,separator=",\n">) throws THR;
>>

