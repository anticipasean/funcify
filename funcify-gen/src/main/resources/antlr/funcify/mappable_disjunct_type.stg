import "wrappable_disjunct_type.stg"


mappable_disjunct_type(class_name,
                       ensemble_type_name,
                       package=[],
                       witness_type="WT",
                       type_variables=[],
                       next_type_variable="",
                       next_type_variable_sequences=[],
                       ensemble_type_package=[],
                       map_impl_sequences=[]) ::= <<
package <package; separator=".">;

<ensemble_type_import(ensemble_type_name, ensemble_type_package)>
<null_check_import()>
<java_util_func_import()>

public interface <ensemble_type_declaration(class_name, witness_type, type_variables)> extends <ensemble_type_declaration(ensemble_type_name, witness_type, type_variables)> {

<type_variables,next_type_variable_sequences,map_impl_sequences:{tv, ntvs, mis | <disjunct_map_method(ensemble_type_name, type_variables, tv, next_type_variable, i, witness_type, ntvs, mis)>};separator="\n\n">

}
>>

disjunct_map_method(ensemble_type_name, type_variables, current_type_variable, next_type_variable, numeric_suffix="", witness_type="WT", next_type_variable_sequence=[], map_impl_seq=[]) ::= <<
    default \<<next_type_variable>\> <ensemble_type_declaration(ensemble_type_name, witness_type, next_type_variable_sequence)> map<numeric_suffix>(<disjunct_map_method_container_parameter(ensemble_type_name, witness_type, type_variables)>, <disjunct_map_method_function_parameter(current_type_variable, next_type_variable)>) {
        <null_check("container")>;
        <null_check("mapper")>;
        return container.unwrap(<map_impl_seq:{ mis | <mis>};anchor,separator=",\n">);
    }
>>

disjunct_map_method_container_parameter(ensemble_type_name, witness_type="WT", type_variables=[]) ::= <<
final <ensemble_type_declaration(ensemble_type_name, witness_type, type_variables)> container
>>

disjunct_map_method_function_parameter(current_type_variable, next_type_variable) ::= <<
final Function\<? super <current_type_variable>, ? extends <next_type_variable>\> mapper
>>
