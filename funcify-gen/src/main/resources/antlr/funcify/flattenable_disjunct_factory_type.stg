import "wrappable_disjunct_factory_type.stg"


flattenable_disjunct_factory_type(class_name,
                                  implemented_type,
                                  container_type,
                                  package=[],
                                  witness_type="WT",
                                  type_variables=[],
                                  next_type_variable="",
                                  next_type_variable_sequences=[],
                                  ensemble_type_package=[],
                                  flat_map_impl_sequences=[]) ::= <<
package <package; separator=".">;

<ensemble_type_import(implemented_type.type_name, implemented_type.type_package)>
<ensemble_type_import(container_type.type_name, container_type.type_package)>
<null_check_import()>
<java_util_func_import()>

public interface <ensemble_type_declaration(class_name, witness_type, type_variables)> extends <ensemble_type_declaration(implemented_type.type_name, witness_type, type_variables)> {

<if(!rest(type_variables))><\\>
<type_variables,next_type_variable_sequences,flat_map_impl_sequences:{tv, ntvs, mis | <disjunct_solo_flat_map_method(container_type, type_variables, tv, next_type_variable, i, witness_type, ntvs, mis)>};separator="\n\n">
<else><\\>
<type_variables,next_type_variable_sequences,flat_map_impl_sequences:{tv, ntvs, mis | <disjunct_flat_map_method(container_type, type_variables, tv, next_type_variable, i, witness_type, ntvs, mis)>};separator="\n\n">
<endif>

}
>>

disjunct_flat_map_method(container_type, type_variables, current_type_variable, next_type_variable, numeric_suffix="", witness_type="WT", next_type_variable_sequence=[], flat_map_impl_seq=[]) ::= <<
    default \<<next_type_variable>\> <ensemble_type_declaration(container_type.type_name, witness_type, next_type_variable_sequence)> flatMap<numeric_suffix>(<[disjunct_flat_map_method_container_parameter(container_type, witness_type, type_variables), disjunct_flat_map_method_function_parameter(container_type, current_type_variable, witness_type, next_type_variable_sequence)];anchor, separator=",\n">) {
        <null_check("container")>;
        <null_check("flatMapper")>;
        return this.unwrap(container, <flat_map_impl_seq:{ mis | <mis>};anchor,separator=",\n">);
    }
>>

disjunct_solo_flat_map_method(container_type, type_variables, current_type_variable, next_type_variable, numeric_suffix="", witness_type="WT", next_type_variable_sequence=[], flat_map_impl_seq=[]) ::= <<
    default \<<next_type_variable>\> <ensemble_type_declaration(container_type.type_name, witness_type, next_type_variable_sequence)> flatMap<numeric_suffix>(<[disjunct_flat_map_method_container_parameter(container_type, witness_type, type_variables), disjunct_flat_map_method_function_parameter(container_type, current_type_variable, witness_type, next_type_variable_sequence)];anchor, separator=",\n">) {
        <null_check("container")>;
        <null_check("flatMapper")>;
        return this.unwrap(container, <[flat_map_impl_seq:{ mis | <mis>},disjunct_solo_empty_case(next_type_variable)];anchor,separator=",\n">);
    }
>>

disjunct_flat_map_method_container_parameter(container_type, witness_type="WT", type_variables=[]) ::= <<
final <ensemble_type_declaration(container_type.type_name, witness_type, type_variables)> container
>>

disjunct_flat_map_method_function_parameter(container_type, current_type_variable, witness_type="WT", next_type_variable_sequence=[]) ::= <<
final Function\<? super <current_type_variable>, ? extends <ensemble_type_declaration(container_type.type_name, witness_type, next_type_variable_sequence)>\> flatMapper
>>

disjunct_solo_empty_case(next_type_variable) ::= <<
() -> this.\<<next_type_variable>\>empty()
>>