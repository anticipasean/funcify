import "funcify.stg"

ensemble_type_declaration(ensemble_type_name, witness_type="WT", type_variables=[]) ::= "<ensemble_type_name>\<<witness_type>, <type_variables; separator={, }>\>"

disjunct_wrappable(class_name, package=[], witness_type="WT", type_variables=[], next_type_variable="") ::= <<
package <package; separator=".">

<null_check_import()>
<java_util_func_import()>

public interface <ensemble_type_declaration(class_name, witness_type, type_variables)> extends <ensemble_type_declaration(ensemble_type_name, witness_type, type_variables)> {

<type_variables:{tv | <disjunct_wrap_method(class_name, tv, type_variables, i)>};separator="\n\n">

<disjunct_unwrap_method(next_type_variable, type_variables)>

}
>>

disjunct_wrap_method(class_name, current_type_variable, type_variables=[], numeric_suffix="") ::= <<
    default \<<type_variables;separator=", ">\> <ensemble_type_declaration(class_name, witness_type, type_variables)> wrap<numeric_suffix>(final <current_type_variable> input<numeric_suffix>);
>>

disjunct_unwrap_method(next_type_variable, type_variables=[]) ::=  <<
    default \<<next_type_variable>\> <next_type_variable> unwrap(<type_variables:{tv | <disjunct_unwrap_method_parameter(tv, next_type_variable)>};separator=",\n">);
>>

disjunct_unwrap_method_parameter(type_variable, next_type_variable) ::= "final Function\<? super <type_variable>, ? extends <next_type_variable>\> function<type_variable>"